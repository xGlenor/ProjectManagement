@page "/tasks"
@using ProjectManagement.Dtos
@using ProjectManagement.IService

@using Task = Models.Task;
@attribute [StreamRendering]
@inject IUserService UserService;
@inject ITaskService TaskService;
@inject IProjectService ProjectService;
@inject NavigationManager _navigationManager

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTask">
    Add Task
</button>


@if (!tasks.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>TaskId</th>
            <th>Project</th>
            <th>Task Name</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Status</th>
            <th>Users</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var task in tasks)
        {
            <tr>
                <td>@task.taskId</td>
                <td>@GetProjectName(task.projectId)</td>
                <td>@task.taskName</td>
                <td>@task.description</td>
                <td>@task.priority</td>
                <td>@task.status</td>
                <td>
                    @if (task.assignedUserId.Any())
                    {
                        <ul>
                            @foreach (var userId in task.assignedUserId)
                            {
                                <li>@GetUserByName(userId.ToString())</li>
                            }
                        </ul>
                    }
                </td>
                <td>
                    <button type="button" class="btn btn-success"
                            data-bs-toggle="modal" data-bs-target="#editUser"
                            @onclick="() => TaskEdit = task">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteTask(task.taskId)">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


<div class="modal fade" id="addTask" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <AddTask/>
        </div>
    </div>
</div>

@if (TaskEdit != null)
{
    <div class="modal fade" id="editUser" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditTask TaskEdit="TaskEdit" />
        </div>
    </div>
</div>
}



@code {
    private List<Task> tasks;
    private Task TaskEdit;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        tasks = TaskService.GetAll();
    }

    private void DeleteTask(string id)
    {
        Console.WriteLine(id);
        TaskService.Delete(id);
        tasks = TaskService.GetAll();
    }
    

    private string GetProjectName(string id)
    {
        var project = ProjectService.GetById(id);
        return project.projectName;
    }

    private string GetUserByName(string id)
    {
        var user = UserService.GetById(id);
        return $"{user.firstName} {user.lastName}";
    }


}