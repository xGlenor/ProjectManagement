@page "/tasks"
@using ProjectManagement.Dtos
@using ProjectManagement.IService
@using ProjectManagement.Models
@using Task = Models.Task;
@attribute [StreamRendering]
@inject IUserService UserService;
@inject ITaskService TaskService;
@inject IProjectService ProjectService;
@inject NavigationManager _navigationManager

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTask">
    Add Task
</button>


@if (!tasks.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>TaskId</th>
            <th>Project</th>
            <th>Task Name</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Status</th>
            <th>Users</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var task in tasks)
        {
            <tr>
                <td>@task.taskId</td>
                <td>@GetProjectName(task.projectId)</td>
                <td>@task.taskName</td>
                <td>@task.description</td>
                <td>@task.priority</td>
                <td>@task.status</td>
                <td>
                    @if (task.assignedUserId.Any())
                    {
                        <ul>
                            @foreach (var userId in task.assignedUserId)
                            {
                                <li>@GetUserByName(userId.ToString())</li>
                            }
                        </ul>
                    }
                </td>
                <td>
                    <button type="button" class="btn btn-success"
                            data-bs-toggle="modal" data-bs-target="#editUser"
                            @onclick="() => TaskEdit = task">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteTask(task.taskId)">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


<div class="modal fade" id="addTask" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="Task" OnSubmit="Create">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Add new task</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="mb-3">
                        <label for="firstName" class="form-label">Task name</label>
                        <InputText type="text" @bind-Value="Task.taskName" class="form-control" id="firstName"/>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea @bind-Value="Task.description" class="form-control" id="description"/>
                    </div>
                    <div class="mb-3">
                        <label for="project" class="form-label">Project</label>
                        <InputSelect class="form-control" @bind-Value="Task.projectId">
                            @foreach (var project in ProjectService.GetAllProjectNames())
                            {
                                <option value="@project.projectId">@project.projectName</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputSelect class="form-control" @bind-Value="Task.status">
                            <option value="ToDo">To do</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Completed">Completed</option>
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Priority</label>
                        <InputSelect class="form-control" @bind-Value="Task.priority">
                            <option value="High">High</option>
                            <option value="Medium">Medium</option>
                            <option value="Low">Low</option>
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Users assigned</label>
                        <RadzenListBox @bind-Value=@Task.assignedUserId Data=@UserService.GetAllUsers() TextProperty="@nameof(UserDtos.email)" ValueProperty="@nameof(UserDtos.userId)"
                                       Multiple=true AllowClear=true Placeholder="Select users" Style="width: 100%; max-width: 400px; height: 200px"
                                       InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select products" } })"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" @onclick="Create" class="btn btn-primary">Add User</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@*
@if (TaskEdit != null)
{
    <div class="modal fade" id="editUser" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="TaskEdit" OnSubmit="Edit">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Add new user</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="firstName" class="form-label">Firstname</label>
                        <InputText type="text" @bind-Value="TaskEdit.firstName" class="form-control" id="firstName"/>
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Lastname</label>
                        <InputText type="text" @bind-Value="TaskEdit.lastName" class="form-control" id="lastName"/>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText type="email" @bind-Value="TaskEdit.email" class="form-control" id="email"/>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText type="text" @bind-Value="TaskEdit.password" class="form-control" id="password"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Change</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
}*@



@code {
    private List<Task> tasks;
    private Task TaskEdit;
    private Task Task = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        tasks = TaskService.GetAll();
    }

    private void DeleteTask(string id)
    {
        Console.WriteLine(id);
        TaskService.Delete(id);
        tasks = TaskService.GetAll();
    }

    private void Create()
    {
        TaskService.Add(Task);
        _navigationManager.Refresh(true);
    }

    private void Edit()
    {
        TaskService.Update(TaskEdit);
        _navigationManager.Refresh(true);
    }

    private string GetProjectName(string id)
    {
        var project = ProjectService.GetById(id);
        return project.projectName;
    }

    private string GetUserByName(string id)
    {
        var user = UserService.GetById(id);
        return $"{user.firstName} {user.lastName}";
    }


}